{"version":3,"sources":["Components/Card.js","Components/CardList.js","robots.js","Components/Searchbox.js","Components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","style","width","height","CardList","robots","cardcomponent","map","user","i","Components_Card","key","username","Searchbox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","Response","json","_this3","filterRobots","filter","toLowerCase","includes","length","Components_Searchbox","Components_Scroll","Components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.119da262.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id}) => {\r\n    // const {name , email, id } = props;\r\n    \r\n    return (\r\n        <div className = \" bg-light-green dib br3 pa3 ma2 grow bd-2 shadow-5 cardStyle\">\r\n            <img src={` https://robohash.org/${id}`} alt=\"robot1\" style = {{width:\"200px\", height:\"200px\"}} />\r\n            <div className =\"\">\r\n                <h2> {name }</h2>\r\n                <p>{email} </p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\nconst CardList = ({ robots }) => {\r\n\r\n    const cardcomponent = robots.map((user, i) => {\r\n        return (\r\n            \r\n                <Card key = {i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n            \r\n        );\r\n    })\r\n    return (\r\n        <div>\r\n            {cardcomponent}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react'\r\nconst Searchbox = ({ searchfield, SearchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green black \"\r\n                type=\"seacrh\" placeholder=\"Search For Robot\"\r\n                onChange= {SearchChange} />\r\n        </div>\r\n    )\r\n}\r\nexport default Searchbox;","import React from 'react'\r\nconst Scroll = (props) => {\r\n    return (\r\n        // <div style= {{overflowY:\"scroll\", borderTop: \"1px solid #0CCAC4\", height:\"500px\"}}>\r\n        <div className = \"scrollbar\">\r\n            {props.children}\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport \"tachyons\";\n// Component \n//  import Card from \"./Components/Card\";\nimport CardList from \"./Components/CardList\" ;\nimport { robots } from './robots.js';\nimport Searchbox from \"./Components/Searchbox\";\nimport Scroll from \"./Components/Scroll\";\n// Component \n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(Response => {\n        return Response.json()\n      })\n      .then(user => {\n        return this.setState({ robots: user })\n      })\n\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n  render() {\n    const filterRobots = this.state.robots.filter(robots => {\n      return (robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\n    })\n\n\n    if (robots.length === 0) {\n      return (\n        <h1>Loading</h1>\n      )\n    }\n    else {\n      return (\n        <div className=\"tc\">\n          <div  className = \"clear\" >\n            <h1 className=\" titleName f1 \">Robot Squad </h1>\n            <Searchbox SearchChange={this.onSearchChange} />\n          </div>\n                 \n          <Scroll >\n            <CardList robots={filterRobots} />\n          </Scroll>\n\n        </div>\n        // <div className=\"tc\">\n\n        //  <div id = 'parent'>\n        //  <h1 className=\" titleName f1\">Robot Squad </h1>\n        //   <Searchbox SearchChange={this.onSearchChange} />\n        //  </div>\n        //  <div id ='child'>\n        //  <Scroll>\n        //     <CardList robots={filterRobots} />\n        //   </Scroll>\n        //  </div>\n\n        // </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\"\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}